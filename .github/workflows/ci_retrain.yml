name: MLflow CI-CD for Telco Churn Model

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  train-and-build-docker:
    runs-on: ubuntu-latest 

    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies from requirements.txt
        run: pip install -r MLProject/requirements.txt

      - name: Run ML Project 
        run: mlflow run MLProject/ --env-manager local

      - name: Get MLflow run_id
        id: get_run_id
        run: echo "RUN_ID=$(cat MLProject/mlflow_run_id.txt)" >> $GITHUB_OUTPUT
      
      - name: Upload MLflow artifacts to GitHub
        uses: actions/upload-artifact@v4 
        with:
          name: mlflow-runs 
          path: mlruns/ 
          if-no-files-found: ignore 

      - name: Upload Modelling Output Log
        uses: actions/upload-artifact@v4
        with:
          name: modelling-script-output-log 
          path: modelling_output.log 
          if-no-files-found: ignore 

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_TOKEN }}   

      - name: Build Docker Image and Push to Hub
        uses: docker/build-push-action@v5
        with:
          context: ./MLProject 
          file: ./MLProject/Dockerfile 
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/telco-churn-model:${{ steps.run_ml_project.outputs.mlflow_run_id }}
          cache-from: type=gha
          
      - name: Download Model Artifact for Further Use
        if: success() && steps.run_ml_project.outputs.mlflow_run_id != ''
        run: |
          set -e # Keluar jika ada error
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlproject-env

          MLFLOW_RUN_ID="${{ steps.run_ml_project.outputs.mlflow_run_id }}"
          # Pastikan ini nama model yang kamu log di modelling.py
          ARTIFACT_PATH_ON_DAGSHUB="tuned_logistic_regression_model" 
          DOWNLOAD_DESTINATION="downloaded_model_artifact" # Direktori di runner tempat model akan diunduh

          echo "Attempting to download artifact '$ARTIFACT_PATH_ON_DAGSHUB' for run ID '$MLFLOW_RUN_ID' from DagsHub..."

          python -c "
          import mlflow
          import os
          import shutil

          # Set environment variables untuk MLflow di Python script
          # Ini perlu disetel lagi karena ini adalah sub-shell baru untuk python -c
          os.environ['MLFLOW_TRACKING_URI'] = os.environ.get('MLFLOW_TRACKING_URI')
          os.environ['MLFLOW_TRACKING_USERNAME'] = os.environ.get('MLFLOW_TRACKING_USERNAME')
          os.environ['MLFLOW_TRACKING_PASSWORD'] = os.environ.get('MLFLOW_TRACKING_PASSWORD')

          run_id = os.environ.get('MLFLOW_RUN_ID_GHA') # Diambil dari env var yang disetel di step sebelumnya
          artifact_path_on_dagshub = os.environ.get('ARTIFACT_NAME_ON_DAGSHUB_GHA')
          download_destination = os.environ.get('DOWNLOAD_DESTINATION_GHA')

          print(f'Mencoba mengunduh artefak: run_id={run_id}, artifact_path={artifact_path_on_dagshub}, dst_path={download_destination}')

          if os.path.exists(download_destination):
              print(f'Membersihkan direktori yang sudah ada: {download_destination}')
              shutil.rmtree(download_destination)

          downloaded_path = mlflow.artifacts.download_artifacts(
              run_id=run_id,
              artifact_path=artifact_path_on_dagshub,
              dst_path=download_destination
          )
          print(f'Artefak berhasil diunduh ke: {downloaded_path}')

          if not os.path.exists(downloaded_path):
              raise FileNotFoundError(f'Path artefak yang diunduh tidak ada: {downloaded_path}')
          if not os.path.isdir(downloaded_path):
              raise ValueError(f'Path artefak yang diunduh bukan direktori: {downloaded_path}')
          if not os.listdir(downloaded_path):
              raise ValueError(f'Direktori artefak yang diunduh kosong: {downloaded_path}')
          "
        env: 
          MLFLOW_RUN_ID_GHA: ${{ steps.run_ml_project.outputs.mlflow_run_id }}
          ARTIFACT_NAME_ON_DAGSHUB_GHA: tuned_logistic_regression_model
          DOWNLOAD_DESTINATION_GHA: downloaded_model_artifact
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}

      - name: Commit processed data and artifacts (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Cek apakah ada perubahan yang perlu di-commit (misal: folder mlruns jika ada local tracking)
          # 'mlflow_run_id.txt' juga akan di-commit
          git add .
          git diff-index --quiet HEAD || git commit -m "Automated: Model retraining, Dagshub run ${{ steps.run_ml_project.outputs.mlflow_run_id }} and Docker build"
          git push
        if: success()
