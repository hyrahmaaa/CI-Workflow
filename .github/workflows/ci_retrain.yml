name: CI - Retrain & Docker Build (Telco Churn)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  train_and_build_docker:
    runs-on: ubuntu-latest 

    permissions:
      contents: write 
      id-token: write 

    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }} 
      DAGSHUB_REPO_NAME: CI-Workflow 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Set up Miniconda environment
        uses: conda-incubator/setup-miniconda@v2 
        with:
          python-version: 3.13 
          auto-activate-base: false 
          activate-environment: mlproject-env 
          environment-file: MLProject/conda.yaml 
          force-create: true 

      - name: Install DagsHub client 
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlproject-env 
          pip install dagshub==0.5.10 

      - name: Configure MLflow Tracking for DagsHub
        run: |
          echo "MLFLOW_TRACKING_URI=${{ env.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ env.MLFLOW_TRACKING_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=${{ env.MLFLOW_TRACKING_PASSWORD }}" >> $GITHUB_ENV
          echo "DAGSHUB_REPO_NAME=${{ env.DAGSHUB_REPO_NAME }}" >> $GITHUB_ENV

      - name: Run MLflow Project (Model Retraining)
        id: run_mlflow_project # Memberikan ID ke langkah ini untuk mengakses outputnya
        run: |
          set -ex # Exit immediately if a command exits with a non-zero status

          source "$(conda info --base)/etc/profile.d/conda.sh" # Inisialisasi conda shell
          conda activate mlproject-env # Aktifkan environment Conda

          echo "=== Verifying MLProject folder contents ==="
          ls -F MLProject/ # Menampilkan isi folder MLProject untuk debugging
          echo "========================================="

          echo "=== Starting MLflow Project Execution ==="
          # Menjalankan MLflow Project dan menangkap semua outputnya
          # stderr (2) digabungkan ke stdout (1)
          # Perintah ini akan gagal jika ada masalah dalam modelling.py
          if ! MLFLOW_FULL_OUTPUT=$(mlflow run MLProject/ --env-manager local 2>&1); then
            echo "MLflow run command failed. Full output:"
            echo "$MLFLOW_FULL_OUTPUT" # Cetak semua outputnya, termasuk error
            exit 1 # Keluar dengan status gagal
          fi
          echo "=== MLflow Project Execution Finished (Successfully) ==="
          echo "$MLFLOW_FULL_OUTPUT" # Cetak output lengkap jika berhasil

          # Ekstrak RUN_ID dari output MLflow
          RUN_ID=$(echo "$MLFLOW_FULL_OUTPUT" | grep -oP "Successfully completed MLflow Run with ID \K\w+" | tail -n 1)

          if [ -z "$RUN_ID" ]; then
            echo "Error: MLflow Run ID could not be extracted even though command completed. Check output for unexpected messages."
            exit 1
          fi

          echo "MLFLOW_RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
          echo "mlflow_run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "MLflow run initiated with ID: $RUN_ID"
          echo "=== MLflow Project execution and Run ID extraction complete ==="
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_TOKEN }}   

      - name: Build Docker Image and Push to Hub
        uses: docker/build-push-action@v5 
        with:
          context: ./MLProject 
          file: ./MLProject/Dockerfile 
          push: true 
          tags: ${{ secrets.DOCKER_USERNAME }}/telco-churn-model:${{ steps.run_mlflow_project.outputs.mlflow_run_id }}
          cache-from: type=gha 

      - name: Download Model Artifact for Further Use
        if: success() && steps.run_mlflow_project.outputs.mlflow_run_id != ''
        run: |
          set -e # Keluar jika ada error
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlproject-env

          MLFLOW_RUN_ID="${{ steps.run_mlflow_project.outputs.mlflow_run_id }}"
          ARTIFACT_PATH_ON_DAGSHUB="logistic_regression_model_autolog" 
          DOWNLOAD_DESTINATION="downloaded_model_artifact" 

          echo "Attempting to download artifact '$ARTIFACT_PATH_ON_DAGSHUB' for run ID '$MLFLOW_RUN_ID' from DagsHub..."

          python -c "
          import mlflow
          import os
          import shutil

          os.environ['MLFLOW_TRACKING_URI'] = os.environ.get('MLFLOW_TRACKING_URI')
          os.environ['MLFLOW_TRACKING_USERNAME'] = os.environ.get('MLFLOW_TRACKING_USERNAME')
          os.environ['MLFLOW_TRACKING_PASSWORD'] = os.environ.get('MLFLOW_TRACKING_PASSWORD')

          run_id = os.environ.get('MLFLOW_RUN_ID_GHA')
          artifact_path_on_dagshub = os.environ.get('ARTIFACT_NAME_ON_DAGSHUB_GHA')
          download_destination = os.environ.get('DOWNLOAD_DESTINATION_GHA')

          print(f'Mencoba mengunduh artefak: run_id={run_id}, artifact_path={artifact_path_on_dagshub}, dst_path={download_destination}')

          if os.path.exists(download_destination):
              print(f'Membersihkan direktori yang sudah ada: {download_destination}')
              shutil.rmtree(download_destination)

              downloaded_path = mlflow.artifacts.download_artifacts(
              run_id=run_id,
              artifact_path=artifact_path_on_dagshub,
              dst_path=download_destination
          )
          print(f'Artefak berhasil diunduh ke: {downloaded_path}')

          if not os.path.exists(downloaded_path):
              raise FileNotFoundError(f'Path artefak yang diunduh tidak ada: {downloaded_path}')
          if not os.path.isdir(downloaded_path):
              raise ValueError(f'Path artefak yang diunduh bukan direktori: {downloaded_path}')
          if not os.listdir(downloaded_path):
              raise ValueError(f'Direktori artefak yang diunduh kosong: {downloaded_path}')
          "
        env: 
          MLFLOW_RUN_ID_GHA: ${{ steps.run_mlflow_project.outputs.mlflow_run_id }}
          ARTIFACT_NAME_ON_DAGSHUB_GHA: logistic_regression_model
          DOWNLOAD_DESTINATION_GHA: downloaded_model_artifact 
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }} 

      - name: Commit processed data and artifacts (if any)
        run: |
          git config user.name "github-actions[bot]" 
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Cek apakah ada perubahan yang perlu di-commit (misal: mlruns folder jika ada local tracking)
          git add .
          git diff-index --quiet HEAD || git commit -m "Automated: Model retraining, Dagshub run ${{ steps.run_mlflow_project.outputs.mlflow_run_id }} and Docker build"
          git push
        if: success() 
